{
  "version": 3,
  "sources": ["pure-context-menu.js"],
  "sourcesContent": ["/**\n * @typedef Config\n * @property {String} contextMenuClass Class applied for holder element\n * @property {String} dropdownClass Class applied for dropdown\n * @property {String} dividerClass Class applied to the divider item\n * @property {String} itemClass Class applied to the menu item\n * @property {String} disabledClass Class applied to the disabled items\n * @property {Number} zIndex z-index assigned to the menu\n * @property {Boolean} preventCloseOnClick Global behaviour for items when clicking\n * @property {Boolean} useLists Enable list groups\n * @property {String} listClass Class applied to the list\n * @property {Array} listItemClasses Class applied to the list item\n * @property {Function} show Whether to show menu based on event\n */\nlet baseOptions = {\n  contextMenuClass: \"pure-context-menu\",\n  dropdownClass: \"dropdown-menu\",\n  dividerClass: \"dropdown-divider\",\n  itemClass: \"dropdown-item\",\n  disabledClass: \"disabled\",\n  zIndex: \"9999\",\n  preventCloseOnClick: false,\n  useLists: false,\n  listClass: \"list-group\",\n  listItemClasses: [\"list-group-item\", \"list-group-item-action\"],\n  show: (event, inst) => true,\n};\n\nlet instances = new Set();\n\n/**\n * @typedef Item\n * @property {String} label\n * @property {Boolean} [html]\n * @property {Array} [classes]\n * @property {Boolean} [preventCloseOnClick]\n * @property {Boolean} [disabled]\n * @property {Function} [callback]\n */\n\n/**\n * Easily manage context menus\n * Works out of the box with bootstrap css\n */\nclass PureContextMenu {\n  _el;\n  _contextMenu;\n  _items;\n  _options;\n  _currentEvent;\n\n  /**\n   * @param {HTMLElement} el\n   * @param {object} items\n   * @param {object} opts\n   */\n  constructor(el, items, opts) {\n    /**\n     * @type {Item[]}\n     */\n    this._items = items;\n\n    /**\n     * @type {HTMLElement}\n     */\n    this._el = el;\n\n    /**\n     * @type {HTMLElement}\n     */\n    this._contextMenu = null;\n\n    /**\n     * @type {Config}\n     */\n    this._options = Object.assign({}, baseOptions, opts);\n\n    // bind the menu on context menu\n    // add also long press support, this helps with ios browsers\n    // include https://cdn.jsdelivr.net/npm/long-press-event@2.4/dist/long-press-event.min.js in your pages\n    [\"contextmenu\", \"long-press\"].forEach((type) => {\n      el.addEventListener(type, this);\n    });\n\n    // close if the user clicks outside of the menu\n    [\"click\", \"touchstart\"].forEach((type) => {\n      document.addEventListener(type, this);\n    });\n\n    instances.add(this);\n  }\n\n  /**\n   * @link https://gist.github.com/WebReflection/ec9f6687842aa385477c4afca625bbf4#handling-events\n   * @param {Event} event\n   */\n  handleEvent = (event) => {\n    const aliases = {\n      \"long-press\": \"contextmenu\",\n      touchstart: \"click\",\n    };\n    const type = aliases[event.type] || event.type;\n    this[`on${type}`](event);\n  };\n\n  /**\n   * @param {Config} opts\n   */\n  static updateDefaultOptions(opts) {\n    baseOptions = Object.assign(baseOptions, opts);\n  }\n\n  /**\n   * @returns {Config}\n   */\n  static getDefaultOptions() {\n    return baseOptions;\n  }\n\n  /**\n   * @returns {Item[]}\n   */\n  getItems() {\n    return this._items;\n  }\n\n  /**\n   * @param {Item[]} items\n   */\n  setItems(items) {\n    this._items = items;\n  }\n\n  /**\n   * Create the menu\n   * @returns {HTMLElement}\n   */\n  _buildContextMenu = () => {\n    const useLists = this._options.useLists;\n    const contextMenu = document.createElement(\"ul\");\n    contextMenu.style.minWidth = \"120px\";\n    contextMenu.style.maxWidth = \"240px\";\n    contextMenu.style.display = \"block\";\n    contextMenu.classList.add(...[this._options.contextMenuClass, this._options.dropdownClass]);\n    if (useLists) {\n      contextMenu.classList.add(this._options.listClass);\n    }\n\n    for (const item of this._items) {\n      const child = document.createElement(\"li\");\n      if (useLists) {\n        //@link https://getbootstrap.com/docs/5.3/components/list-group/#for-links-and-buttons\n        child.classList.add(...this._options.listItemClasses);\n        if (item.disabled) {\n          child.classList.add(this._options.disabledClass);\n        }\n      }\n      if (item.classes) {\n        child.classList.add(...item.classes);\n      }\n      if (item === \"-\") {\n        const divider = document.createElement(\"hr\");\n        divider.classList.add(this._options.dividerClass);\n        child.appendChild(divider);\n      } else {\n        const link = document.createElement(\"a\");\n        if (item.html) {\n          link.innerHTML = item.label;\n        } else {\n          link.innerText = item.label;\n        }\n        link.style.cursor = \"pointer\";\n        link.style.whiteSpace = \"normal\";\n        if (!useLists) {\n          link.classList.add(this._options.itemClass);\n          if (item.disabled) {\n            link.classList.add(this._options.disabledClass);\n          }\n        }\n        child.appendChild(link);\n      }\n      contextMenu.appendChild(child);\n    }\n    return contextMenu;\n  };\n\n  /**\n   * Normalize the context menu position so that it won't get out of bounds\n   * @param {number} mouseX\n   * @param {number} mouseY\n   * @param {HTMLElement} contextMenu\n   */\n  _normalizePosition = (mouseX, mouseY, contextMenu) => {\n    const scope = this._el;\n    const contextStyles = window.getComputedStyle(contextMenu);\n    // clientWidth exclude borders and we add 1px for good measure\n    const offset = parseInt(contextStyles.borderWidth) + 1;\n\n    // compute what is the mouse position relative to the container element (scope)\n    const bounds = scope.getBoundingClientRect();\n\n    let scopeX = mouseX;\n    let scopeY = mouseY;\n\n    if (![\"BODY\", \"HTML\"].includes(scope.tagName)) {\n      scopeX -= bounds.left;\n      scopeY -= bounds.top;\n    }\n\n    const menuWidth = parseInt(contextStyles.width);\n\n    // check if the element will go out of bounds\n    const outOfBoundsOnX = scopeX + menuWidth > scope.clientWidth;\n    const outOfBoundsOnY = scopeY + contextMenu.clientHeight > scope.clientHeight;\n\n    let normalizedX = mouseX;\n    let normalizedY = mouseY;\n\n    // normalize on X\n    if (outOfBoundsOnX) {\n      normalizedX = scope.clientWidth - menuWidth - offset;\n      if (![\"BODY\", \"HTML\"].includes(scope.tagName)) {\n        normalizedX += bounds.left;\n      }\n    }\n\n    // normalize on Y\n    if (outOfBoundsOnY) {\n      normalizedY = scope.clientHeight - contextMenu.clientHeight - offset;\n      if (![\"BODY\", \"HTML\"].includes(scope.tagName)) {\n        normalizedY += bounds.top;\n      }\n    }\n\n    return { normalizedX, normalizedY };\n  };\n\n  close = () => {\n    this._contextMenu?.remove();\n    this._contextMenu = null;\n  };\n\n  /**\n   * @param {MouseEvent} event\n   */\n  oncontextmenu = (event) => {\n    if (!this._options.show(event, this)) {\n      return;\n    }\n\n    // Block regular context menu if our menu is shown\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Close existing menus\n    instances.forEach((inst) => {\n      inst.close();\n    });\n\n    // Don't do anything if clicked on the same menu\n    const closestMenu = event.target.closest(`.${this._options.contextMenuClass}`);\n    if (closestMenu) {\n      return;\n    }\n\n    // Store event for callbacks, this allows to know what is the target that triggered the menu\n    this._currentEvent = event;\n\n    // the current context menu should disappear when a new one is displayed\n    this.close();\n\n    // build and show on ui\n    const contextMenu = this._buildContextMenu();\n    document.querySelector(\"body\").append(contextMenu);\n\n    // set the position already so that width can be computed\n    contextMenu.style.position = \"fixed\";\n    contextMenu.style.zIndex = this._options.zIndex;\n\n    // adjust the position according to mouse position\n    const mouseX = event.detail.clientX ?? event.clientX;\n    const mouseY = event.detail.clientY ?? event.clientY;\n    const { normalizedX, normalizedY } = this._normalizePosition(mouseX, mouseY, contextMenu);\n    contextMenu.style.top = `${normalizedY}px`;\n    contextMenu.style.left = `${normalizedX}px`;\n\n    // Store reference\n    this._contextMenu = contextMenu;\n  };\n\n  /**\n   * @param {MouseEvent} event\n   */\n  _isCurrentTarget = (event) => {\n    const closestMenu = event.target.closest(`.${this._options.contextMenuClass}`);\n    if (closestMenu == this._contextMenu) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * @param {MouseEvent} event\n   */\n  _handleItemClick = (event) => {\n    const t = event.target;\n    /**\n     * @type {HTMLLIElement}\n     */\n    const li = t.closest(`li`);\n    if (li) {\n      const index = [...li.parentElement.childNodes].findIndex((item) => item === li);\n      const item = this._items[index];\n\n      if (item.callback) {\n        item.callback(this._currentEvent, this);\n\n        // do not close the menu if set\n        const preventCloseOnClick = item.preventCloseOnClick ?? this._options.preventCloseOnClick ?? false;\n        if (!preventCloseOnClick) {\n          this.close();\n        }\n      }\n    }\n  };\n\n  /**\n   * Used to determine if the user has clicked outside of the context menu and if so, close it\n   * Handles delegated events on menu items\n   * @param {MouseEvent} event\n   */\n  onclick = (event) => {\n    if (this._isCurrentTarget(event)) {\n      this._handleItemClick(event);\n      return;\n    }\n    this.close();\n  };\n\n  /**\n   * Remove all the event listeners that were registered for this feature\n   */\n  off = () => {\n    instances.delete(this);\n    this.close();\n    [\"click\", \"touchstart\"].forEach((type) => {\n      document.removeEventListener(type, this);\n    });\n    [\"contextmenu\", \"long-press\"].forEach((type) => {\n      this._el.removeEventListener(type, this);\n    });\n  };\n}\n\nexport default PureContextMenu;\n"],
  "mappings": "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",
  "names": ["baseOptions", "event", "inst", "instances", "PureContextMenu", "_el", "_contextMenu", "_items", "_options", "_currentEvent", "el", "items", "opts", "type", "_buildContextMenu", "useLists", "contextMenu", "item", "child", "divider", "link", "_normalizePosition", "mouseX", "mouseY", "scope", "contextStyles", "offset", "bounds", "scopeX", "scopeY", "menuWidth", "outOfBoundsOnX", "outOfBoundsOnY", "normalizedX", "normalizedY", "_isCurrentTarget", "_handleItemClick", "li", "index", "pure_context_menu_default"]
}
